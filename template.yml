AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  My Python Lambda Application to send an MT700 details

Globals:
  Function:
    Timeout: 30

Resources:
  MT700SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambdafunction.lambda_handler
      Runtime: python3.12
      Role: !GetAtt MT700SendEmailFunctionRole.Arn

      Events:
        SendEmailApiEvent:
          Type: Api
          Properties:
            Path: /sendemail
            Method: POST
  # --- This is the new role resource that contains all permissions ---
  MT700SendEmailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # Policy for CloudWatch Logs
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${MT700SendEmailFunction}:*'
        
        # Policy for sending emails via SES
        - PolicyName: SESRawEmailPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendRawEmail
                Resource: "*"
# --- END OF ROLE RESOURCE ---

  SendEmailApiEndpoint:
    Description: "API Gateway endpoint URL for the email sending service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/sendemail"